"""Fix booking constraints

Revision ID: ddb4b5b461ce
Revises: 
Create Date: 2024-12-04 00:24:12.476331

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ddb4b5b461ce'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('car',
    sa.Column('car_id', sa.UUID(), nullable=False),
    sa.Column('car_make', sa.VARCHAR(length=255), nullable=False),
    sa.Column('car_model', sa.VARCHAR(length=255), nullable=False),
    sa.Column('car_year', sa.INTEGER(), nullable=False),
    sa.Column('car_rental_price', sa.INTEGER(), nullable=False),
    sa.Column('car_image', sa.VARCHAR(length=255), nullable=True),
    sa.Column('car_quantity', sa.INTEGER(), nullable=False),
    sa.CheckConstraint('car_quantity >= 0', name='check_car_quantity'),
    sa.CheckConstraint('car_rental_price >= 0', name='check_car_rental_price'),
    sa.CheckConstraint('car_year BETWEEN 1886 AND EXTRACT(YEAR FROM CURRENT_DATE) + 1', name='check_car_year_valid'),
    sa.PrimaryKeyConstraint('car_id')
    )
    op.create_table('catering',
    sa.Column('catering_id', sa.UUID(), nullable=False),
    sa.Column('catering_description', sa.VARCHAR(length=1000), nullable=False),
    sa.Column('catering_name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('catering_image', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('catering_id')
    )
    op.create_table('decoration',
    sa.Column('decoration_id', sa.UUID(), nullable=False),
    sa.Column('decoration_name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('decoration_price', sa.INTEGER(), nullable=False),
    sa.Column('decoration_description', sa.VARCHAR(length=255), nullable=False),
    sa.Column('decoration_image', sa.VARCHAR(length=255), nullable=True),
    sa.CheckConstraint('decoration_price >= 0', name='check_decoration_price'),
    sa.PrimaryKeyConstraint('decoration_id')
    )
    op.create_table('dish',
    sa.Column('dish_id', sa.UUID(), nullable=False),
    sa.Column('dish_name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('dish_description', sa.VARCHAR(length=1000), nullable=False),
    sa.Column('dish_type', sa.Enum('starter', 'main', 'dessert', name='dishtype'), nullable=False),
    sa.Column('dish_image', sa.VARCHAR(length=255), nullable=True),
    sa.Column('dish_cost_per_serving', sa.INTEGER(), nullable=False),
    sa.CheckConstraint('dish_cost_per_serving >= 0', name='check_dish_cost_per_serving'),
    sa.PrimaryKeyConstraint('dish_id')
    )
    op.create_table('promo',
    sa.Column('promo_id', sa.UUID(), nullable=False),
    sa.Column('promo_name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('promo_expiry', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('promo_discount', sa.FLOAT(), nullable=False),
    sa.CheckConstraint('promo_discount > 0', name='check_promo_discount'),
    sa.CheckConstraint('promo_expiry > CURRENT_TIMESTAMP', name='check_promo_expiry'),
    sa.PrimaryKeyConstraint('promo_id')
    )
    op.create_table('user',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('venue',
    sa.Column('venue_id', sa.UUID(), nullable=False),
    sa.Column('venue_name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('venue_address', sa.VARCHAR(length=255), nullable=False),
    sa.Column('venue_capacity', sa.INTEGER(), nullable=False),
    sa.Column('venue_price_per_day', sa.INTEGER(), nullable=False),
    sa.Column('venue_image', sa.VARCHAR(length=255), nullable=True),
    sa.CheckConstraint('venue_capacity > 0', name='check_venue_capacity'),
    sa.PrimaryKeyConstraint('venue_id')
    )
    op.create_table('booking',
    sa.Column('booking_id', sa.UUID(), nullable=False),
    sa.Column('booking_date', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('booking_event_date', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('booking_guest_count', sa.INTEGER(), nullable=False),
    sa.Column('booking_status', sa.Enum('pending', 'confirmed', 'declined', name='bookingstatus'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('venue_id', sa.UUID(), nullable=False),
    sa.Column('catering_id', sa.UUID(), nullable=True),
    sa.Column('decoration_id', sa.UUID(), nullable=True),
    sa.Column('promo_id', sa.UUID(), nullable=True),
    sa.CheckConstraint('booking_event_date > CURRENT_TIMESTAMP', name='check_booking_event_date'),
    sa.CheckConstraint('booking_guest_count > 0', name='check_booking_guest_count'),
    sa.ForeignKeyConstraint(['catering_id'], ['catering.catering_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['decoration_id'], ['decoration.decoration_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['promo_id'], ['promo.promo_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.venue_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('booking_id')
    )
    op.create_index('unique_venue_reservation_day', 'booking', ['venue_id', sa.text('DATE(booking_event_date)')], unique=True)
    op.create_table('catering_menu_item',
    sa.Column('catering_id', sa.UUID(), nullable=False),
    sa.Column('dish_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['catering_id'], ['catering.catering_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dish_id'], ['dish.dish_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('catering_id', 'dish_id')
    )
    op.create_table('user_contact',
    sa.Column('user_contact_number', sa.VARCHAR(length=15), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_contact_number', 'user_id')
    )
    op.create_table('venue_review',
    sa.Column('venue_review_id', sa.UUID(), nullable=False),
    sa.Column('venue_review_text', sa.VARCHAR(length=1000), nullable=False),
    sa.Column('venue_review_created_at', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('venue_rating', sa.FLOAT(), nullable=False),
    sa.Column('venue_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.CheckConstraint('venue_rating >= 1', name='check_venue_rating'),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.venue_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('venue_review_id')
    )
    op.create_table('car_reservation',
    sa.Column('car_reservation_id', sa.UUID(), nullable=False),
    sa.Column('car_id', sa.UUID(), nullable=False),
    sa.Column('booking_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['booking_id'], ['booking.booking_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['car_id'], ['car.car_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('car_reservation_id')
    )
    op.create_table('payment',
    sa.Column('payment_id', sa.UUID(), nullable=False),
    sa.Column('amount_payed', sa.INTEGER(), nullable=False),
    sa.Column('discount', sa.FLOAT(), nullable=False),
    sa.Column('total_amount', sa.INTEGER(), nullable=False),
    sa.Column('payment_method', sa.Enum('debit_card', 'credit_card', 'easypaisa', 'jazzcash', 'other', name='paymentmethod'), nullable=False),
    sa.Column('booking_id', sa.UUID(), nullable=False),
    sa.CheckConstraint('amount_payed >= 0', name='check_payment_amount_payed'),
    sa.CheckConstraint('discount >= 0', name='check_payment_discount'),
    sa.CheckConstraint('total_amount >= 0', name='check_payment_total_amount'),
    sa.ForeignKeyConstraint(['booking_id'], ['booking.booking_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('payment_id')
    )
     # Triggers
    # Create the trigger function check_and_update_car_quantity
    op.execute("""
    CREATE OR REPLACE FUNCTION check_and_update_car_quantity()
    RETURNS TRIGGER AS $$
    BEGIN
        IF (SELECT car_quantity FROM car WHERE car_id = NEW.car_id) > 0 THEN
            UPDATE car
            SET car_quantity = car_quantity - 1
            WHERE car_id = NEW.car_id;
            RETURN NEW;
        ELSE
            RAISE EXC
            
            
            
            
            EPTION 'Cannot reserve car: insufficient quantity';
        END IF;
    END;
    $$ LANGUAGE plpgsql;
    """)

    # Create the trigger car_reservation_trigger
    op.execute("""
    CREATE TRIGGER car_reservation_trigger
    BEFORE INSERT ON car_reservation
    FOR EACH ROW
    EXECUTE FUNCTION check_and_update_car_quantity();
    """)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('payment')
    op.drop_table('car_reservation')
    op.drop_table('venue_review')
    op.drop_table('user_contact')
    op.drop_table('catering_menu_item')
    op.drop_index('unique_venue_reservation_day', table_name='booking')
    op.drop_table('booking')
    op.drop_table('venue')
    op.drop_table('user')
    op.drop_table('promo')
    op.drop_table('dish')
    op.drop_table('decoration')
    op.drop_table('catering')
    op.drop_table('car')

     # Drop the car_reservation_trigger trigger first
    op.execute(
        "DROP TRIGGER IF EXISTS car_reservation_trigger ON car_reservation;")

    # Drop the check_and_update_car_quantity function
    op.execute("DROP FUNCTION IF EXISTS check_and_update_car_quantity;")
    # ### end Alembic commands ###
